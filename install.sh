#!/bin/bash

# ü¶Ä Script de Instala√ß√£o Autom√°tica - Bloco Praieira
# Este script configura automaticamente o projeto em uma nova m√°quina

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

print_header() {
    echo -e "${BLUE}"
    echo "ü¶Ä ============================================ ü¶Ä"
    echo "    INSTALA√á√ÉO AUTOM√ÅTICA - BLOCO PRAIEIRA"
    echo "ü¶Ä ============================================ ü¶Ä"
    echo -e "${NC}"
}

# Verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detectar sistema operacional
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Verificar pr√©-requisitos
check_prerequisites() {
    print_status "Verificando pr√©-requisitos..."
    
    local missing_deps=()
    
    # Node.js
    if command_exists node; then
        local node_version=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$node_version" -ge 18 ]; then
            print_success "Node.js $(node --version) ‚úì"
        else
            print_warning "Node.js vers√£o muito antiga: $(node --version)"
            missing_deps+=("node")
        fi
    else
        print_error "Node.js n√£o encontrado"
        missing_deps+=("node")
    fi
    
    # Python
    if command_exists python3; then
        local python_version=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1-2)
        print_success "Python $(python3 --version) ‚úì"
    elif command_exists python; then
        local python_version=$(python --version | cut -d' ' -f2 | cut -d'.' -f1-2)
        print_success "Python $(python --version) ‚úì"
    else
        print_error "Python n√£o encontrado"
        missing_deps+=("python")
    fi
    
    # Git
    if command_exists git; then
        print_success "Git $(git --version) ‚úì"
    else
        print_error "Git n√£o encontrado"
        missing_deps+=("git")
    fi
    
    # Verificar se h√° depend√™ncias faltando
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Depend√™ncias faltando: ${missing_deps[*]}"
        print_status "Por favor, instale as depend√™ncias antes de continuar:"
        echo "  - Node.js: https://nodejs.org/"
        echo "  - Python: https://python.org/"
        echo "  - Git: https://git-scm.com/"
        exit 1
    fi
    
    print_success "Todos os pr√©-requisitos atendidos!"
}

# Instalar depend√™ncias do sistema (se necess√°rio)
install_system_deps() {
    local os=$(detect_os)
    print_status "Sistema detectado: $os"
    
    case $os in
        "linux")
            if command_exists apt-get; then
                print_status "Instalando depend√™ncias do sistema (Ubuntu/Debian)..."
                sudo apt-get update
                sudo apt-get install -y curl wget chromium-browser
            elif command_exists yum; then
                print_status "Instalando depend√™ncias do sistema (RHEL/CentOS)..."
                sudo yum install -y curl wget chromium
            fi
            ;;
        "macos")
            if command_exists brew; then
                print_status "Instalando depend√™ncias via Homebrew..."
                brew install curl wget
            else
                print_warning "Homebrew n√£o encontrado. Algumas depend√™ncias podem faltar."
            fi
            ;;
        "windows")
            print_status "Windows detectado. Certifique-se de que Chrome est√° instalado."
            ;;
    esac
}

# Configurar projeto Next.js
setup_nextjs() {
    print_status "Configurando projeto Next.js..."
    
    # Instalar depend√™ncias
    print_status "Instalando depend√™ncias do Node.js..."
    npm install
    
    # Configurar arquivo de ambiente
    if [ ! -f ".env.local" ]; then
        print_status "Criando arquivo .env.local..."
        cp .env.example .env.local
        print_warning "Edite .env.local com suas configura√ß√µes espec√≠ficas"
    else
        print_success "Arquivo .env.local j√° existe"
    fi
    
    # Testar build
    print_status "Testando build do projeto..."
    npm run build
    
    print_success "Projeto Next.js configurado!"
}

# Configurar automa√ß√£o Python
setup_automation() {
    print_status "Configurando automa√ß√£o Python..."
    
    # Entrar no diret√≥rio de automa√ß√£o
    cd automacao-web
    
    # Criar ambiente virtual
    print_status "Criando ambiente virtual Python..."
    python3 -m venv venv 2>/dev/null || python -m venv venv
    
    # Ativar ambiente virtual
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        source venv/Scripts/activate
    fi
    
    # Instalar depend√™ncias
    print_status "Instalando depend√™ncias Python..."
    
    # Tentar depend√™ncias completas primeiro, fallback para m√≠nimas
    if pip install -r requirements.txt 2>/dev/null; then
        print_success "Depend√™ncias completas instaladas"
    else
        print_warning "Falha nas depend√™ncias completas, instalando m√≠nimas..."
        pip install -r requirements-minimal.txt
        print_success "Depend√™ncias m√≠nimas instaladas"
    fi
    
    # Configurar arquivo de ambiente
    if [ ! -f ".env" ]; then
        print_status "Criando arquivo .env para automa√ß√£o..."
        cat > .env << EOF
# URL do site (ajustar conforme necess√°rio)
BASE_URL=http://localhost:3000

# Configura√ß√µes do WebDriver
WEBDRIVER_TIMEOUT=10
IMPLICIT_WAIT=5
PAGE_LOAD_TIMEOUT=30

# Configura√ß√µes de teste
MAX_WAIT_ELEMENTS=10
SCREENSHOT_ON_FAILURE=true

# Configura√ß√µes do navegador
HEADLESS_MODE=false
BROWSER_WIDTH=1920
BROWSER_HEIGHT=1080

# Configura√ß√µes de relat√≥rios
EXPORT_EXCEL=true
EXPORT_JSON=true

# Configura√ß√µes de logging
LOG_LEVEL=INFO
LOG_TO_FILE=true
EOF
        print_success "Arquivo .env criado"
    else
        print_success "Arquivo .env j√° existe"
    fi
    
    # Voltar ao diret√≥rio principal
    cd ..
    
    print_success "Automa√ß√£o Python configurada!"
}

# Executar testes
run_tests() {
    print_status "Executando testes de verifica√ß√£o..."
    
    # Iniciar servidor Next.js em background
    print_status "Iniciando servidor Next.js..."
    npm run dev &
    SERVER_PID=$!
    
    # Aguardar servidor inicializar
    print_status "Aguardando servidor inicializar..."
    sleep 10
    
    # Verificar se servidor est√° rodando
    if curl -s -f http://localhost:3000 > /dev/null; then
        print_success "Servidor Next.js rodando em http://localhost:3000"
    else
        print_error "Servidor Next.js n√£o est√° acess√≠vel"
        kill $SERVER_PID 2>/dev/null
        return 1
    fi
    
    # Executar demo da automa√ß√£o
    print_status "Executando demo da automa√ß√£o..."
    cd automacao-web
    
    # Ativar ambiente virtual
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        source venv/Scripts/activate
    fi
    
    # Executar demo
    if python demo.py; then
        print_success "Demo da automa√ß√£o executado com sucesso!"
    else
        print_warning "Demo falhou, mas o ambiente est√° configurado"
    fi
    
    cd ..
    
    # Parar servidor
    print_status "Parando servidor Next.js..."
    kill $SERVER_PID 2>/dev/null
    
    print_success "Testes conclu√≠dos!"
}

# Gerar relat√≥rio de instala√ß√£o
generate_report() {
    local report_file="INSTALACAO_$(date +%Y%m%d_%H%M%S).md"
    
    print_status "Gerando relat√≥rio de instala√ß√£o..."
    
    cat > "$report_file" << EOF
# üìã Relat√≥rio de Instala√ß√£o - Bloco Praieira

**Data:** $(date)
**Sistema:** $(detect_os) - $(uname -a)

## ‚úÖ Componentes Instalados

### Pr√©-requisitos
- **Node.js:** $(node --version 2>/dev/null || echo "N/A")
- **NPM:** $(npm --version 2>/dev/null || echo "N/A")
- **Python:** $(python3 --version 2>/dev/null || python --version 2>/dev/null || echo "N/A")
- **Git:** $(git --version 2>/dev/null || echo "N/A")

### Projeto Next.js
- Depend√™ncias instaladas: $(npm list --depth=0 2>/dev/null | wc -l) pacotes
- Arquivo .env.local: $([ -f ".env.local" ] && echo "‚úÖ Criado" || echo "‚ùå Faltando")
- Build testado: $([ -d ".next" ] && echo "‚úÖ Sucesso" || echo "‚ùå Falha")

### Automa√ß√£o Python
- Ambiente virtual: $([ -d "automacao-web/venv" ] && echo "‚úÖ Criado" || echo "‚ùå Faltando")
- Depend√™ncias: $([ -f "automacao-web/venv/pyvenv.cfg" ] && echo "‚úÖ Instaladas" || echo "‚ùå Faltando")
- Arquivo .env: $([ -f "automacao-web/.env" ] && echo "‚úÖ Criado" || echo "‚ùå Faltando")

## üöÄ Pr√≥ximos Passos

1. **Iniciar desenvolvimento:**
   \`\`\`bash
   npm run dev
   \`\`\`

2. **Executar automa√ß√£o:**
   \`\`\`bash
   cd automacao-web
   source venv/bin/activate  # Linux/Mac
   # ou venv\\Scripts\\activate  # Windows
   python demo.py
   \`\`\`

3. **Verificar documenta√ß√£o:**
   - SETUP_COMPLETO.md
   - AUTOMACAO_GUIDE.md
   - CHECKLIST_SETUP.md

## üìû Suporte

Em caso de problemas:
- Verificar logs de instala√ß√£o
- Consultar documenta√ß√£o
- Reportar problemas espec√≠ficos

---
*Instala√ß√£o autom√°tica conclu√≠da - Bloco Praieira* ü¶Ä
EOF

    print_success "Relat√≥rio gerado: $report_file"
}

# Fun√ß√£o principal
main() {
    print_header
    
    print_status "Iniciando instala√ß√£o autom√°tica do projeto Bloco Praieira..."
    echo
    
    # Verificar se estamos no diret√≥rio correto
    if [ ! -f "package.json" ]; then
        print_error "Este script deve ser executado no diret√≥rio raiz do projeto"
        print_status "Certifique-se de estar no diret√≥rio 'blocopraieira'"
        exit 1
    fi
    
    # Executar instala√ß√£o
    check_prerequisites
    echo
    
    install_system_deps
    echo
    
    setup_nextjs
    echo
    
    setup_automation
    echo
    
    # Perguntar se deve executar testes
    echo -n "Deseja executar testes de verifica√ß√£o? (y/N): "
    read -r run_tests_answer
    if [[ $run_tests_answer =~ ^[Yy]$ ]]; then
        echo
        run_tests
    fi
    echo
    
    generate_report
    echo
    
    print_success "üéâ Instala√ß√£o conclu√≠da com sucesso!"
    echo
    print_status "Para iniciar o desenvolvimento:"
    echo "  1. npm run dev                    # Iniciar site"
    echo "  2. cd automacao-web               # Entrar na automa√ß√£o"
    echo "  3. source venv/bin/activate       # Ativar ambiente Python"
    echo "  4. python demo.py                 # Executar demo"
    echo
    print_status "Documenta√ß√£o dispon√≠vel:"
    echo "  - SETUP_COMPLETO.md      # Guia completo"
    echo "  - AUTOMACAO_GUIDE.md     # Guia da automa√ß√£o"
    echo "  - CHECKLIST_SETUP.md     # Checklist de verifica√ß√£o"
    echo
    print_success "Bloco Praieira - Santo Andr√©, ABC Paulista ü¶Ä"
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi